{"version":3,"sources":["WeatherCardComponent.js","QuoteComponent.js","MainClock.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","Card","style","width","Body","this","props","weather","location","name","region","current","temp_f","src","condition","icon","forecast","forecastday","day","maxtemp_f","mintemp_f","Component","Quotes","className","randomQuote","text","author","accessKey","makeRequest","a","fetch","response","json","data","weatherApi","city","response2","data2","timeZoneId","tz_id","quotesApi","MainClock","state","time","Intl","DateTimeFormat","dateStyle","timeStyle","timeZone","format","Date","quote","setState","timer","setInterval","tick","pics","Math","floor","random","results","length","document","querySelector","background","urls","regular","ipAddress","setTimeZone","quotes","clearInterval","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8e77b0a8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nclass WeatherCard extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Card style={{ width: '18rem' }}>\r\n\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t{/* {JSON.stringify(this.props.weather)}{this.props.weather.temp_f} */}\r\n\t\t\t\t\t\t<h1>{this.props.weather.location?.name}, {this.props.weather.location?.region}</h1>\r\n\t\t\t\t\t\t<hr></hr>\r\n\t\t\t\t\t\t<h4>Currently:</h4>\r\n\t\t\t\t\t\t<h3>{this.props.weather.current?.temp_f}&deg;F<img src={this.props.weather.current?.condition.icon} /></h3>\r\n\t\t\t\t\t\t<hr></hr>\r\n\t\t\t\t\t\t<h4>Expected:</h4>\r\n\t\t\t\t\t\t<h3>\r\n\t\t\t\t\t\t\t<h4>H: {this.props.weather.forecast?.forecastday[0].day.maxtemp_f}&deg; F</h4>\r\n\t\t\t\t\t\t\t<h4>L: {this.props.weather.forecast?.forecastday[0].day.mintemp_f}&deg; F</h4>\r\n\t\t\t\t\t\t\t<img src={this.props.weather.forecast?.forecastday[0].day.condition.icon} />\r\n\t\t\t\t\t\t</h3>\r\n\t\t\t\t\t</Card.Body>\r\n\t\t\t\t</Card>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default WeatherCard;\r\n","import React, { Component } from 'react';\r\n\r\nclass Quotes extends Component {\r\n    render() { \r\n        return (\r\n            <h1 className='quotes'>{this.props.randomQuote.text}<span>-{this.props.randomQuote.author}</span></h1>\r\n        )\r\n    }\r\n}\r\n \r\nexport default Quotes;","import React, { Component } from 'react';\r\nimport WeatherCard from './WeatherCardComponent';\r\nimport Quotes from './QuoteComponent';\r\n\r\nconst accessKey = 'JAVSWj2grC_pjDpfMPsIZIvPx6XHvLY-KYA_CD1b37M';\r\n\r\nasync function makeRequest() {\r\n\tconst response = await fetch(`https://api.unsplash.com/search/photos?page=1&query=space&client_id=${accessKey}`);\r\n\tconst data = await response.json();\r\n\treturn data;\r\n}\r\n\r\nasync function weatherApi() {\r\n\tconst response = await fetch(`http://api.weatherapi.com/v1/ip.json?key=293ae895f9244bf0a66180139220301&q=auto:ip`);\r\n\tconst data = await response.json();\r\n\tconst response2 = await fetch(\r\n\t\t`http://api.weatherapi.com/v1/forecast.json?key=293ae895f9244bf0a66180139220301&q=${data.city}`\r\n\t);\r\n\tconst data2 = await response2.json();\r\n\treturn {\r\n\t\ttimeZoneId: data.tz_id,\r\n\t\tweather: data2\r\n\t};\r\n}\r\n\r\nasync function quotesApi() {\r\n\tconst response = await fetch('https://type.fit/api/quotes');\r\n\tconst data = await response.json();\r\n\treturn data;\r\n}\r\nclass MainClock extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttime: new Intl.DateTimeFormat('en-US', {\r\n\t\t\t\tdateStyle: 'full',\r\n\t\t\t\ttimeStyle: 'long',\r\n\t\t\t\ttimeZone: 'America/Los_Angeles'\r\n\t\t\t}).format(new Date()),\r\n\t\t\ttimeZone: 'America/Los_Angeles',\r\n\t\t\tweather: {},\r\n\t\t\tquote: ''\r\n\t\t};\r\n\t\t// this.onClick = this.onClick.bind(this);\r\n\t}\r\n\r\n\ttick() {\r\n\t\tthis.setState({\r\n\t\t\ttime: new Intl.DateTimeFormat('en-US', {\r\n\t\t\t\tdateStyle: 'full',\r\n\t\t\t\ttimeStyle: 'long',\r\n\t\t\t\ttimeZone: this.state.timeZone\r\n\t\t\t}).format(new Date())\r\n\t\t});\r\n\t}\r\n\r\n\tasync componentDidMount() {\r\n\t\tthis.timer = setInterval(() => this.tick(), 1000);\r\n\t\tconst data = await makeRequest();\r\n\t\tconst pics = Math.floor(Math.random() * data.results.length);\r\n\t\tdocument.querySelector('body').style.background = `url(${data.results[pics].urls.regular})`;\r\n\t\tconst ipAddress = await weatherApi();\r\n\t\tthis.setTimeZone(ipAddress.timeZoneId);\r\n\t\tthis.setState({\r\n\t\t\tweather: ipAddress.weather\r\n\t\t});\r\n\t\tconst quotes = await quotesApi();\r\n\t\tconst quote = Math.floor(Math.random() * quotes.length);\r\n\t\tthis.setState({ quote: quotes[quote]});\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearInterval(this.timer);\r\n\t}\r\n\r\n\tsetTimeZone(timeZone) {\r\n\t\tthis.setState({ timeZone });\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"clock\">{this.state.time}</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='container'>\r\n\t\t\t\t\t<WeatherCard className=\"weatherCard\" weather={this.state.weather} />\r\n\t\t\t\t\t<Quotes className='quotes' randomQuote={this.state.quote} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default MainClock;\r\n","import './App.css';\r\nimport MainClock from './MainClock';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     <MainClock />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}